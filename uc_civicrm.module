<?php

/**
 * @file
 * Module to integrate Ubercart with CiviCRM.
 */

/**
 * Implements hook_help().
 */
function uc_civicrm_help($path = 'admin/help#uc_civicrm') {
  switch ($path) {
    case 'admin/help#uc_civicrm':
      return t("This module integrates Ubercart with CiviCRM. When a customer buys something from the store, the name and address information they provide is added to CiviCRM. Existing contact records will be updated. The new or updated contact is added to a group, activity history record of type 'Purchase' is added to the contact's history and the 'Purchases' tab on the contact's dashboard is populated with a link to their order history.");
  }
}

/**
 * Implements hook_civicrm_tabs().
 */
function uc_civicrm_civicrm_tabs(&$tabs, $cid) {
  $uid = CRM_Core_BAO_UFMatch::getUFId($cid);
  if (empty($uid)) {
    return;
  }

  $history = uc_civicrm_contact_transaction($uid, FALSE);
  $count = count($history['orders']['#rows']);

  $tab = array(
    'id'     => 'purchases',
    'title'  => t('Purchases'),
    'count'  => $count,
    'weight' => 99,
  );

  if ($count > 0) {
    $tab['url'] = url("admin/store/civicrm/customer/orders/$uid");
  }
  $tabs[] = $tab;

  return $tabs;
}

/**
 * Implements hook_menu().
 */
function uc_civicrm_menu() {
  $items = array();
  $items['admin/store/civicrm/customer/orders/%'] = array(
    'title'            => 'CiviCRM',
    'page callback'    => 'uc_civicrm_contact_transaction',
    'page arguments'   => array(5),
    'access arguments' => array('administer CiviCRM'),
    'type'             => MENU_CALLBACK,
  );

  $items['admin/settings/uc_civicrm_menu'] = array(
    'title' => 'Ubercart/CiviCRM',
    'description' => 'Configuration options for Ubercart/CiviCRM integration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_civicrm_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Callback to expose order information in a CiviCRM tab.
 *
 * @param int $uid
 *   Drupal UID for the customer
 */
function uc_civicrm_contact_transaction($uid, $snippet = TRUE) {
  if (is_null($uid) || !civicrm_initialize()) {
    return;
  }

  $output = _uc_civicrm_customer_orders($uid);
  if ($snippet) {
    print render($output);
  }
  else {
    return $output;
  }
}

/**
 * Admin form configuration.
 */
function uc_civicrm_admin() {
  $groups = civicrm_api3('group', 'get', array());

  $options = array();
  foreach ($groups['values'] as $group) {
    $options[$group['id']] = $group['title'];
  }
  natsort($options);

  // Get contribution types.
  $version = explode('.', CRM_Utils_System::version());

  if (version_compare($version[0] . '.' . $version[1], 4.4) >= 0) {
    $types = civicrm_api3('contribution', 'getoptions', array('field' => 'financial_type_id'));
    $types = $types['values'];
  }
  elseif (version_compare($version[0] . '.' . $version[1], 4.3) >= 0) {
    $sql = "SELECT id, name FROM civicrm_financial_type WHERE is_active = 1";
    $dao = CRM_Core_DAO::executeQuery($sql, array());
    $types = array(0 => "Select a type...");
    while ($dao->fetch()) {
      $types[$dao->id] = $dao->name;
    }
  }
  else {
    $sql = "SELECT id, name FROM civicrm_contribution_type WHERE is_active = 1";
    $dao = CRM_Core_DAO::executeQuery($sql, array());
    $types = array(0 => "Select a type...");
    while ($dao->fetch()) {
      $types[$dao->id] = $dao->name;
    }
  }

  $form = array();
  $form['uc_civicrm_contribution_type'] = array(
    '#type' => 'select',
    '#title' => t('Contribution type'),
    '#default_value' => variable_get('uc_civicrm_contribution_type', array()),
    '#options' => $types,
    '#description' => t('Select a contribution type for purchases, making a new type with a name like "Ubercart purchase" is recommended.'),
  );
  $loc_types = _uc_civicrm_get_locations();
  $uc_billing = $loc_types['uc-billing'];
  $uc_delivery = $loc_types['uc-delivery'];
  $civicrm_billing = $loc_types['civicrm-billing'];
  $civicrm_delivery = $loc_types['civicrm-delivery'];

  $form['uc_civicrm_locations_civicrm_billing'] = array(
    '#type' => 'select',
    '#title' => t('CiviCRM Billing Location Type'),
    '#default_value' => $civicrm_billing,
    '#options' => _uc_get_location_type_options(),
    '#description' => t('Choose Location Type to Prefill Billing Address From On The Checkout Form'),
  );

  $form['uc_civicrm_locations_uc_billing'] = array(
    '#type' => 'select',
    '#title' => t('Ubercart Billing Location Type'),
    '#default_value' => $uc_billing,
    '#options' => _uc_get_location_type_options(),
    '#description' => t('Choose Location Type to Save Ubercart Billing Address To'),
  );

  $form['uc_civicrm_locations_civicrm_delivery'] = array(
    '#type' => 'select',
    '#title' => t('CiviCRM Delivery Location Type'),
    '#default_value' => $civicrm_delivery,
    '#options' => _uc_get_location_type_options(),
    '#description' => t('Choose Location Type to Prefill Delivery address from'),
    '#help' => t('This address may be the same or different to the UC address'),
  );

  $form['uc_civicrm_locations_uc_delivery'] = array(
    '#type' => 'select',
    '#title' => t('Ubercart Delivery Location Type'),
    '#default_value' => $uc_delivery,
    '#options' => _uc_get_location_type_options(),
    '#description' => t('Choose Location Type to Save Ubercart Delivery address To'),
  );

  $form['uc_civicrm_groups'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Groups to add purchasers to'),
    '#default_value' => variable_get('uc_civicrm_groups', array()),
    '#options' => $options,
    '#description' => t('Check to add purchasers to the selected groups'),
  );
  return system_settings_form($form);
}

/**
 * Implements Ubercart conditional action hook_ca_predicate().
 *
 * Tell Ubercart to let us know when an order is complete.
 */
function uc_civicrm_ca_predicate() {
  $predicates['uc_civicrm_contact_on_order'] = array(
    '#title'   => t('Copy to CiviCRM upon order submission'),
    '#trigger' => 'uc_checkout_complete',
    '#class'   => 'uc_civicrm',
    '#status'  => 1,
    '#actions' => array(
      array(
        '#name'         => 'uc_civicrm_action_update_contact',
        '#title'        => t('Copy Contact information to CiviCRM'),
        '#argument_map' => array('order' => 'order'),
        '#description' => t('Update or Create contact in CiviCRM'),
      ),
    ),
  );

  $predicates['uc_civicrm_check_order_status'] = array(
    '#title'   => t('Sync CiviCRM status on status update'),
    '#trigger' => 'uc_order_status_update',
    '#class'   => 'uc_civicrm',
    '#status'  => 1,
    '#actions' => array(
      array(
        '#name'         => 'uc_civicrm_sync_status',
        '#title'        => t('Syncronize status'),
        '#argument_map' => array('order' => 'updated_order'),
      ),
    ),
  );

  return $predicates;
}

/**
 * Implements Ubercart conditional action hook_ca_action().
 */
function uc_civicrm_ca_action() {
  $order_arg = array(
    '#entity' => 'uc_order',
    '#title'  => t('Order'),
  );

  $actions['uc_civicrm_action_update_contact'] = array(
    '#title'     => t('Inform CiviCRM upon order submission'),
    '#category'  => t('Order'),
    '#callback'  => 'uc_civicrm_action_update_contact',
    '#arguments' => array('order' => $order_arg),
  );

  $actions['uc_civicrm_sync_status'] = array(
    '#title'     => t('Syncronize order status with CiviCRM when changed'),
    '#category'  => t('Order'),
    '#callback'  => 'uc_civicrm_synchronize_status',
    '#arguments' => array('order' => $order_arg),
  );

  $actions['uc_civicrm_create_activity'] = array(
    '#title'     => t('Create CiviCRM activity'),
    '#category'  => t('Order'),
    '#callback'  => 'uc_civicrm_create_activity',
    '#arguments' => array('order' => $order_arg),
  );
  return $actions;
}

/**
 * Callback to inform CiviCRM on order complete.
 *
 * Called when the conditional action trigger 'uc_checkout_complete'
 * is pulled, with the order information.  Merge the information
 * in the order into the CiviCRM contact database.
 *
 * @param object $order
 *   Order
 */
function uc_civicrm_action_update_contact($order) {
  global $user;

  if (!civicrm_initialize(TRUE)) {
    return;
  }
  $cid = _uc_civicrm_get_cid($order);
  if ($cid === FALSE) {
    uc_order_comment_save($order->order_id, 0, t('Failed to Create CiviCRM Contact.'), 'admin');
    watchdog('uc_civicrm', '_uc_civicrm_get_cid() returned %cid', array('%cid' => $cid), WATCHDOG_ERROR);
    return;
  }

  $cid = _uc_civicrm_add_update_contact($cid, $order);
  if ($cid === FALSE) {
    watchdog('uc_civicrm', '_uc_civicrm_add_update_contact() returned %cid', array('%cid' => $cid), WATCHDOG_ERROR);
    return;
  }
  _uc_civicrm_add_to_groups($cid);
}

/**
 * Action called when order updated.
 *
 * @param object $order
 *   the order
 *
 * @param bool $is_new
 *   TRUE if it's a new order
 */
function uc_civicrm_action_order_civicrm($order, $is_new = TRUE) {
  global $user;

  if (!civicrm_initialize()) {
    return;
  }
  if ($is_new) {

    // Find or create a CiviCRM contact ID for the customer.
    $cid = _uc_civicrm_get_cid($order);
    if ($cid === FALSE) {
      return;
    }

    $cid = _uc_civicrm_add_update_contact($cid, $order);

    if ($cid === FALSE) {
      return;
    }

    // Add the contribution record.
    _uc_civicrm_add_contribution($cid, $order);

    // Add this contact to selected groups.
    _uc_civicrm_add_to_groups($cid);
  }
  else {
    $cid = _uc_civicrm_get_cid($order);
    $params = array(
      'invoice_id' => $order->order_id . "_uc",
      'return.contact_id' => 1,
    );
    try {
      $contribution = civicrm_api3('contribution', 'getsingle', $params);
      $cid = $contribution['contact_id'];
      $params['id'] = $contribution['id'];
    }
    catch (Exception $e) {
      // @TODO figure out why should this exist?
      _uc_civicrm_add_contribution($cid, $order);
      watchdog('uc_civicrm', 'Error getting contribution - but we dont know if this matters: ' . $e->getMessage() . print_r($params, TRUE), array(), WATCHDOG_ERROR);
    }
    try {
      $params = array(
        'contact_id' => $cid,
        'contribution_status_id' => _uc_civicrm_map_contribution_status($order->order_status),
      );
      $result = civicrm_api3('contribution', 'create', $params);
    }
    catch (Exception $e) {
      watchdog('uc_civicrm', 'Error creating contribution: ' . $e->getMessage()  . print_r($params, TRUE), array(), WATCHDOG_ERROR);
    }
  }
}

/**
 * Add contact to any specified groups.
 *
 * @param int $cid
 *   Contact ID
 */
function _uc_civicrm_add_to_groups($cid) {
  // No groups specified.
  $groups = variable_get('uc_civicrm_groups', '');
  if ($groups == '') {
    return;
  }

  foreach ($groups as $id => $key) {
    if ($key != 0) {
      $params = array('contact_id' => $cid, 'group_id' => $key);
      try {
        civicrm_api('group_contact', 'create', $params);
      }
      catch (Exception $e) {
        watchdog('uc_civicrm', 'Error adding contact to group: ' . $result['error_message'], array(), WATCHDOG_ERROR);
      }
    }
  }
}

/**
 * Get contact id for the order's customer.
 *
 * @param object $order
 *   Order
 *
 * @return false|integer
 *   > 0: existing contact
 *   = 0: create new contact
 *   FALSE: error
 */
function _uc_civicrm_get_cid($order) {
  global $user;
  if ($order->uid != 0) {
    $match = CRM_Core_BAO_UFMatch::synchronizeUFMatch($user, $order->uid, $order->primary_email, 'Drupal', FALSE, 'Individual');
    if (!is_object($match)) {
      return FALSE;
    }
    return $match->contact_id;
  }

  // The customer is anonymous.  Look in the CiviCRM contacts table for a
  // contact that matches the primary email.
  $params = array(
    'email' => $order->primary_email,
    'return.contact_id' => TRUE,
    'sequential' => 1,
  );
  try{
    $contact = civicrm_api('contact', 'get', $params);
  }
  catch (Exception $e) {
    watchdog('uc_civicrm', 'civicrm_contact_search(): ' . $e->getMessage(), array(), WATCHDOG_ERROR);
    return FALSE;
  }

  // No matches found, so we will need to create a contact.
  if (count($contact) == 0) {
    return 0;
  }
  $cid = $contact['values'][0]['id'];
  return $cid;
}

/**
 * Add or update contact information.
 */
function _uc_civicrm_add_update_contact($cid, $order) {
  if (!civicrm_initialize(TRUE)) {
    return;
  }
  try {
    $contact = array();
    if ($cid != 0) {
      try {
        $params = array(
          'contact_id' => $cid,
          'return' => array('id', 'source', 'first_name', 'last_name'),
        );
        $contact = civicrm_api3('contact', 'getsingle', $params);
      }
      catch (CiviCRM_Exception $e) {
        watchdog('uc_civicrm', 'civicrm_contact_get():' . $e->getMessage(), array(), WATCHDOG_ERROR);
        return FALSE;
      }
    }

    // Determine if the contact is new - added by bot.
    $log = new CRM_Core_DAO_Log();
    $log->entity_table = 'civicrm_contact';
    $log->entity_id = $cid;
    $log->orderBy('modified_date asc');
    $log->limit(1);
    $result = CRM_Core_DAO::$_nullObject;
    if ($log->find(TRUE)) {
      $result = array(
        'id' => $log->modified_id,
        'date' => $log->modified_date,
      );
    }
    $date = date('Y-m-d H:i:s');
    $to_time = strtotime($date);
    $from_time = strtotime($result['date']);
    $diff = round(abs($to_time - $from_time) / 60, 2) . " minute";
    $contact_status = 'old';
    if ($diff < 30) {
      $contact_status = 'new';
    }

    $contact_params = array(
      'id' => $cid,
      'version' => 3,
    );

    $contact_info = civicrm_api('contact', 'get', $contact_params);
    // Prepare array to update contact via civi API.
    //
    // Assume that if there is a delivery name then that is the
    // contact to add.
    $fname = '';
    $lname = '';
    if (!empty($order->delivery_last_name) && !empty($order->delivery_first_name)) {
      $fname = $order->delivery_first_name;
      $lname = $order->delivery_last_name;
    }
    else {
      $fname = $order->billing_first_name;
      $lname = $order->billing_last_name;
    }

    $contact['last_name'] = $lname;
    $contact['first_name'] = $fname;
    $contact['sort_name'] = "{$lname}, {$fname}";
    $contact['display_name'] = "{$fname} {$lname}";
    $contact['contact_type'] = 'Individual';
    $contact['email'] = $order->primary_email;
    if (empty($contact['source'])) {
      $contact['source'] = 'Ubercart purchase';
    }

    // Create contact or update existing contact.
    if ($contact_status == 'new' && !$contact_info['values'][$cid]['first_name'] && !$contact_info['values'][$cid]['last_name']) {
      try {
        $result = civicrm_api3('contact', 'create', $contact);
        $link = l($result['id'], 'civicrm/contact/view', array('query' => 'reset=1&cid=' . $result['id']));
        uc_order_comment_save($order->order_id, 0, t('Created new CiviCRM Contact !link', array('!link' => $link)), 'admin');
      }
      catch (Exception $e) {
        watchdog('uc_civicrm', 'civicrm_contact_add():' . $e->getMessage(), array(), WATCHDOG_ERROR);
        return FALSE;
      }
    }
    // Location.
    $loc_types = _uc_civicrm_get_locations();
    $uc_billing = $loc_types['uc-billing'];
    $uc_delivery = $loc_types['uc-delivery'];
    try {
      $existing_addresses = civicrm_api3('address', 'get', array('contact_id' => $cid));
      $existing_addresses = $existing_addresses['values'];
      $existing_phones = civicrm_api3('phone', 'get', array('contact_id' => $cid));
      $existing_phones = $existing_phones['values'];
      $delivery_address = $billing_address = array('contact_id' => $cid);
      $address_types = array('billing', 'delivery');

      foreach ($address_types as $address_type) {
        $phone_exists = FALSE;
        if (!empty($order->{$address_type . '_phone'})) {
          $phone = array(
            'phone_type_id' => 1,
            'location_type_id' => ${'uc_' . $address_type},
            'phone' => $order->{$address_type . '_phone'},
            'contact_id' => $cid,
          );
          foreach ($existing_phones as $existing_phone) {
            if ($existing_phone['location_type_id'] == ${'uc_' . $address_type}) {
              $phone['id'] = $existing_phone['id'];
            }
            if ($existing_phone['phone'] == $phone['phone']) {
              $phone_exists = TRUE;
            }
          }
          if (!$phone_exists) {
            civicrm_api3('phone', 'create', $phone);
            $targs = array(
              '%type' => ${'uc_' . $address_type},
              '%phone' => $phone['phone'],
            );
            uc_order_comment_save($order->order_id, 0, t('Created new CiviCRM Phone of type %type: %phone', $targs), 'admin');
          }
        }
        $address_exists = FALSE;
        if (!empty($order->{$address_type . '_last_name'}) && !empty($order->{$address_type . '_first_name'})) {
          $countries = uc_get_country_data(array('country_id' => $order->{$address_type . '_country'}));
          $address = array(
            'location_type_id'       => ${'uc_' . $address_type},
            'city'                   => $order->{$address_type . '_city'},
            'postal_code'            => $order->{$address_type . '_postal_code'},
            'name'                   => $order->{$address_type . '_company'},
            'street_address'         => $order->{$address_type . '_street1'},
            'supplemental_address_1' => $order->{$address_type . '_street2'},
            'country'                => $countries[0]['country_iso_code_2'],
            'contact_id' => $cid,
          );
          if (isset($order->{$address_type . 'delivery_zone'})) {
            $address['state_provide'] = uc_get_zone_code($order->{$address_type . 'delivery_zone'});
          }
          foreach ($existing_addresses as $existing) {
            if ($existing['location_type_id'] == ${'uc_' . $address_type}) {
              $address['id'] = $existing['id'];
            }
            // @TODO Don't create if exact match of another - should
            // we make 'exact match' configurable.
            elseif (
              $existing['street_address'] == $address['street_address']
              && $existing['supplemental_address_1'] == $address['supplemental_address_1']
              && $existing['city'] == $address['city']
              && $existing['postal_code'] == $address['postal_code']
            ) {
              $address_exists = TRUE;
            }
          }
          if (!$address_exists) {
            civicrm_api3('address', 'create', $address);
            $targs = array(
              '%address_type' => ${'uc_' . $address_type},
              '%address' => $address['street_address'],
            );
            uc_order_comment_save($order->order_id, 0, t('Created new CiviCRM Address of type %address_type: %address', $targs), 'admin');
          }
        }
      }
    }
    catch (CiviCRM_Exception $e) {
      $msg = 'uc_civicrm_add_update_contact:';
      if (!empty($address)) {
        $msg .= " while updating $address_type address " . print_r($address, TRUE);
      }
      elseif (!empty($phone)) {
        $msg .= " while updating $address_type phone " . print_r($phone, TRUE);
      }
      watchdog('uc_civicrm', $msg . $e->getMessage(), array(), WATCHDOG_ERROR);
    }
    return $cid;
  }
  catch (Exception $e) {
    drupal_set_message('CiviCRM error.', 'error');
    watchdog('uc_civicrm', 'CiviCRM error: %message', array('%message' => $e->getMessage()), WATCHDOG_ERROR);
  }
}

/**
 * Creates required contribution fields if they have not already been created.
 */
function _uc_civicrm_create_custom_contribution_fields() {
  $group_id = variable_get('uc_civicrm_contribution_group_id', FALSE);
  if ($group_id != FALSE) {
    return;
  }

  // First we need to check if the Sales Tax and Shipping custom fields have
  // already been created.
  $params = array(
    'title'            => 'Ubercart Purchases',
    'name'             => 'ubercart_purchases',
    'extends'          => array('Contribution'),
    'weight'           => 1,
    'collapse_display' => 0,
    'is_active'        => 1,
  );
  try {
    $custom_group = civicrm_api3('custom_group', 'create', $params);
  }
  catch (CiviCRM_API3_Exception $e) {
    watchdog('uc_civicrm', 'civicrm_api -custom group create(): ' . $e->getMessage, array(), WATCHDOG_ERROR);
  }
  variable_set('uc_civicrm_contribution_group_id', $custom_group['id']);

  $params = array(
    'custom_group_id' => $custom_group['id'],
    'label'           => 'Sales Tax',
    'html_type'       => 'Text',
    'data_type'       => 'String',
    'weight'          => 1,
    'is_required'     => 0,
    'is_searchable'   => 0,
    'is_active'       => 1,
  );
  $tax_field = civicrm_api3('custom_field', 'create', $params);
  variable_set('uc_civicrm_sales_tax_field_id', $tax_field['id']);

  $params = array(
    'custom_group_id' => $custom_group['id'],
    'label'           => 'Shipping Cost',
    'html_type'       => 'Text',
    'data_type'       => 'String',
    'weight'          => 2,
    'is_required'     => 0,
    'is_searchable'   => 0,
    'is_active'       => 1,
  );
  $shipping_field = civicrm_api3('custom_field', 'create', $params);
  variable_set('uc_civicrm_shipping_cost_field_id', $shipping_field['id']);
}

/**
 * Add a contribution record.
 *
 * Create any custom fields and get the transaction id. If it doesn't exist,
 * make one up and add the contribution.
 */
function _uc_civicrm_add_contribution($cid, &$order) {
  if (!civicrm_initialize()) {
    return;
  }
  _uc_civicrm_create_custom_contribution_fields();

  $pay_data = uc_payment_load_payments($order->order_id);
  $pay_data[0]->data = unserialize($pay_data[0]->data);
  $txn_id = isset($pay_data[0]->data['txn_id']) ?
    $pay_data[0]->data['txn_id'] : 'TRXN ID NOT AVAILABLE ' . md5($order->order_id);

  // @FIXME Landmine. CiviCRM doesn't seem to accept financial values with
  // precision greater than 2 digits after the decimal.
  $rounded_total = round($order->order_total * 100) / 100;

  $sales_tax_field_id = 'custom_' . variable_get('uc_civicrm_sales_tax_field_id', '');
  $shipping_cost_field_id = 'custom_' . variable_get('uc_civicrm_shipping_cost_field_id', '');
  $tax_cost = '';
  $shipping_cost = '';

  foreach ($order->line_items as $item) {
    if ($item['type'] == 'tax') {
      $tax_cost = $item['amount'];
    }
    elseif ($item['type'] == 'shipping') {
      $shipping_cost = $item['amount'];
    }
  }

  $params = array(
    'contact_id' => $cid,
    'total_amount' => $rounded_total,
    // @FIXME this needs a sensible default
    'contribution_type_id' => variable_get('uc_civicrm_contribution_type', 1),
    'payment_instrument_id' => _uc_civicrm_map_payment_instrument($order->payment_method),
    'non_deductible_amount' => 00.00,
    'fee_amount' => 00.00,
    'net_amount' => $rounded_total,
    'trxn_id' => $txn_id,
    'invoice_id' => $order->order_id . '_uc',
    'source' => _uc_civicrm_create_detail_string($order),
    'receive_date' => 'now',
    'contribution_status_id' => _uc_civicrm_map_contribution_status($order->order_status),
    'note' => _uc_civicrm_create_detail_string($order),
    "$sales_tax_field_id" => $tax_cost,
    "$shipping_cost_field_id" => $shipping_cost,
  );
  try {
    $contribution = civicrm_api3('Contribution', 'create', $params);
  }
  catch (Exception $e) {
    // Log the error, but continue.
    watchdog('uc_civicrm', 'civicrm_contribution_create(): ' . $e->getMessage()  . print_r($params, TRUE), array(), WATCHDOG_ERROR);
    return FALSE;
  }

  return TRUE;
}

/**
 * Maps Ubercart payment method to CiviCRM payment instrument.
 *
 * @param string $payment_device
 *   An Ubercart payment device
 *
 * @return int
 *   The CiviCRM id of the payment processor
 */
function _uc_civicrm_map_payment_instrument($payment_device) {
  // Note that the payment methods for Ubercart are hardcoded in the
  // payment modules under hook_uc_payment_method(), so anything
  // that's not explicitly a check or cash has to be a credit card.
  $map = array(
    "credit" => 1,
    "cod"    => 3,
    "check"  => 4,
  );

  if (array_key_exists($payment_device, $map)) {
    $id = $map[$payment_device];
  }
  else {
    // Another Ubercart payment method - good chance this is credit.
    $id = 1;
  }

  return $id;
}

/**
 * Maps Ubercart order status to CiviCRM contribution status.
 *
 * @param string $order_status
 *   An Ubercart order status
 *
 * @return int
 *   A CiviCRM order status
 */
function _uc_civicrm_map_contribution_status($order_status) {
  // NOTE: There may be a more "correct" way to do this.
  $map = array(
    "completed"        => 1,
    "payment_received" => 1,
    "pending"          => 2,
    "processing"       => 5,
    "canceled"         => 3,
    "in_checkout"      => 5,
  );

  if (array_key_exists($order_status, $map)) {
    $id = $map[$order_status];
  }
  else {
    // Oh no.
    $id = 1;
    watchdog('uc_civicrm', 'There is no status that maps to %order_status, marking as "Complete"', array('%order_status' => $order_status), WATCHDOG_WARNING);
  }

  return $id;
}

/**
 * Create activity in Civi.
 */
function uc_civicrm_create_activity($order, $arguments) {
  if (!civicrm_initialize(TRUE)) {
    return;
  }
  if (user_is_logged_in() == FALSE) {
    return;
  }
  try {
    civicrm_api3('activity', 'create', $arguments);
  }
  catch (CiviCRM_API3_Exception $e) {
    drupal_set_message(t('Activity creation failed: %message', array('%message' => $e->getmessage())));
    watchdog('uc_civicrm', 'activity creation failed: %message', array('%message' => $e->getmessage()));
  }
}

/**
 * Form builder to create a CiviCRM Activity.
 */
function uc_civicrm_create_activity_form($form_state, $settings = array()) {
  if (!civicrm_initialize(TRUE)) {
    return;
  }
  $form = array();
  $activity_types = civicrm_api3('constant', 'get', array('name' => 'activityType'));
  asort($activity_types['values']);
  $activity_statuses = civicrm_api3('constant', 'get', array('name' => 'activityStatus'));
  asort($activity_statuses['values']);
  $form['activity_type_id'] = array(
    '#type' => 'select',
    '#title' => t('Activity Type'),
    '#options' => $activity_types['values'],
    '#required' => TRUE,
    '#description' => t('Type of Activity to Create'),
    '#default_value' => isset($settings['activity_type_id']) ? $settings['activity_type_id'] : NULL,
  );
  $form['activity_status_id'] = array(
    '#type' => 'select',
    '#title' => t('Activity Status'),
    '#options' => $activity_statuses['values'],
    '#required' => TRUE,
    '#description' => t('Status of Activity'),
    '#default_value' => isset($settings['activity_status_id']) ? $settings['activity_status_id'] : array_search(ts('Scheduled'), $activity_statuses['values']),
  );
  $form['assignee_contact_id'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Enter the contact you wish the activity to be assigned to'),
    '#description' => t('The activity will be assigned to the person with this contact id'),
    '#default_value' => isset($settings['assignee_contact_id']) ? $settings['assignee_contact_id'] : NULL,
  );

  return $form;
}

/**
 * Synchronizes order status from Ubercart to CiviCRM.
 *
 * @param object $order
 *   The order object.
 */
function uc_civicrm_syncronize_status($order) {
  civicrm_initialize();

  $search_params = array('invoice_id' => $order->order_id . "_uc", 'return.contact_id' => 1);
  $result = civicrm_api3('contributon', 'get', $search_params);

  // @TODO Doesn't civicrm_api3 throw exceptions instead of returning
  // CiviCRM errors?
  if (civicrm_error($result)) {
    watchdog('uc_civicrm', 'uc_civicrm_syncronize_status() returned: %message', array('%message' => $result['error_message']), WATCHDOG_ERROR);
  }
  else {
    $contribution = array_shift($result);
    $params = array(
      'id'                     => $contribution['contribution_id'],
      'contact_id'             => $contribution['contact_id'],
      'contribution_status_id' => _uc_civicrm_map_contribution_status($order->order_status),
    );

    $result = civicrm_api3('contribution', 'create', $params);
  }
}

/**
 * Create string to insert for purchase activity details.
 */
function _uc_civicrm_create_detail_string($order) {
  $str = '';
  $n = 1;
  foreach ($order->products as $product) {
    if ($n > 1) {
      $str .= ', ';
    }
    $str .= $product->title;
    $n++;
  }

  return $str;
}

/**
 * Return a list of orders made by a customer.
 *
 * Originally from uc_order.module but added here when it was removed
 * from that module.
 *
 * @see http://drupal.org/node/1567946
 *
 * @param int $uid
 *   The user id of the customer.
 */
function _uc_civicrm_customer_orders($uid) {
  $result = db_select('uc_orders')->extend('PagerDefault')
    ->fields('uc_orders')
    ->condition('uid', $uid)
    ->condition('order_status', uc_order_status_list('general', TRUE), 'IN')
    ->orderBy('created', 'DESC')
    ->limit(50)
    ->execute();

  $header = array(
    t('View'),
    t('Order ID'),
    t('Date'),
    t('Billing name'),
    t('Shipping name'),
    t('Items'),
    t('Total'),
  );
  $rows = array();
  $totals = array('orders' => 0, 'items' => 0, 'total' => 0);
  foreach ($result as $order) {
    $icons = l(uc_store_get_icon('file:order_view'), 'admin/store/orders/' . $order->order_id, array(
               'html' => TRUE,
               'attributes' => array('title' => t("View order !order_id.", array('!order_id' => $order->order_id))),
             ));
    $icons .= l(uc_store_get_icon('file:order_edit'), 'admin/store/orders/' . $order->order_id . '/edit', array(
                'html' => TRUE,
                'attributes' => array('title' => t("Edit order !order_id.", array('!order_id' => $order->order_id))),
              ));
    $bname = drupal_ucfirst($order->billing_first_name) . ' ' . drupal_ucfirst($order->billing_last_name);
    $sname = drupal_ucfirst($order->delivery_first_name) . ' ' . drupal_ucfirst($order->delivery_last_name);
    $item_count = db_query("SELECT COUNT(*) FROM {uc_order_products} WHERE order_id = :order_id", array(':order_id' => $order->order_id))->fetchField();

    $totals['orders'] += 1;
    $totals['items'] += $item_count;
    $totals['total'] += $order->order_total;

    $rows[] = array(
      'data' => array(
        array('data' => $icons),
        array('data' => $order->order_id),
        array('data' => format_date($order->created, 'uc_store')),
        array('data' => check_plain($bname)),
        array('data' => check_plain($sname)),
        array('data' => $item_count['COUNT(*)']),
        array('data' => array('#theme' => 'uc_price', '#price' => $order->order_total)),
      ),
      'id' => 'order-' . $order->order_id,
    );
  }

  $build = array();

  $targs = array(
    '!orders' => $totals['orders'],
    '!items' => $totals['items'],
    '!total' => uc_currency_format($totals['total']),
  );
  $build['description'] = array(
    '#markup' => t('!orders orders shown match that account with !items items purchased and !total spent:', $targs),
    '#weight' => -5,
    '#prefix' => '<p>',
    '#suffix' => '</p>',
  );
  $build['orders'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#attributes' => array('width' => '100%', 'class' => array('uc-cust-orders-table')),
    '#empty' => t('No orders found.'),
  );
  $build['pager'] = array(
    '#theme' => 'pager',
    '#weight' => 5,
  );

  return $build;
}

/**
 * Implements hook_form_alter().
 *
 * @TODO This can become
 * uc_civicrm_uc_cart_checkout_form_form_alter().
 *
 * @TODO May be enabled as part of https://drupal.org/node/2171425
 */
/*
function uc_civicrm_form_alter(&$form, $form_state, $form_id) {
  $forms = array('uc_cart_checkout_form');
  if (!in_array($form_id, $forms) || !civicrm_initialize() || (user_is_logged_in() == FALSE)) {
    return;
  }
  // Global $user to get the uid of the current user. Then load that
  // user into the variable $account.
  global $user;
  try {
    $prefillAddresses = $prefillPhones = $primaryAddress = array();
    $contactID = civicrm_api3('uf_match', 'getvalue', array('return' => 'contact_id', 'uf_id' => $user->uid));
    $contact = civicrm_api3('contact', 'getsingle', array('id' => $contactID, 'return' => 'first_name, last_name'));
    $addresses = civicrm_api3('address', 'get', array('contact_id' => $contactID));
    $phones = civicrm_api3('phone', 'get', array('contact_id' => $contactID));
    $locations = _uc_civicrm_get_locations();
    $addressTypes = array('billing', 'delivery');
    foreach ($addressTypes as $addressType) {
      foreach ($addresses ['values'] as $address) {
        $locationName = array_search($address ['location_type_id'], $locations);
        if ($locationName == 'civicrm-' . $addressType || (empty($prefillAddresses[$addressType]) && $locationName == 'uc-' . $addressType)) {
          $prefillAddresses[$addressType] = $address;
        }
        if ($address ['is_primary']) {
          $primaryAddress = $address;
        }
      }
      foreach ($phones['values'] as $phone) {
        $locationName = array_search($phone ['location_type_id'], $locations);
        if ($locationName == 'civicrm-' . $addressType || (empty($prefillPhones[$addressType]) && $locationName == 'uc-' . $addressType)) {
          $prefillPhones[$addressType] = $phone;
        }
        if ($phone['is_primary']) {
          $primaryPhone = $phone;
        }
      }
      if (empty($prefillAddresses[$addressType]) && ! empty($primaryAddress)) {
        $prefillAddresses[$addressType] = $primaryAddress;
      }
      if (empty($prefillPhones[$addressType]) && ! empty($primaryPhone)) {
        $prefillPhones[$addressType] = $primaryPhone;
      }
    }
  }
  catch (CiviCRM_API3_Exception $e) {
    watchdog('uc_civicrm', 'uc_civicrm_form_alter:' . $e->getMessage(), array(), WATCHDOG_ERROR);
    return;
  }

  //In the case of Ubercart's checkout form auto-populate the delivery
  //and billing pane information with the appropriate addresses.
  foreach ($addressTypes as $addressType) {
    $pane = &$form['panes'][$addressType];
    $pane[$addressType . '_first_name']['#default_value'] = CRM_Utils_Array::value('first_name', $contact);
    $pane[$addressType . '_last_name']['#default_value'] = CRM_Utils_Array::value('last_name', $contact);
    if (!empty($prefillAddresses[$addressType])) {
      $prefill = $prefillAddresses[$addressType];
      $pane[$addressType . '_company']['#default_value'] = CRM_Utils_Array::value('name', $prefill);
      $pane[$addressType . '_street1']['#default_value'] = CRM_Utils_Array::value('street_address', $prefill);
      $pane[$addressType . '_street2']['#default_value'] = CRM_Utils_Array::value('supplemental_address_1', $prefill);
      $pane[$addressType . '_city']['#default_value'] = CRM_Utils_Array::value('city', $prefill);
      $pane[$addressType . '_postal_code']['#default_value'] = CRM_Utils_Array::value('postal_code', $prefill);

      // set state
      $stateName = _uc_civicrm_get_option_name('stateProvince', CRM_Utils_Array::value('state_province_id', $prefill));
      $country_name = _uc_civicrm_get_option_name('country', CRM_Utils_Array::value('country_id', $prefill));
      $country_id = _uc_civicrm_get_country_id($country_name);
      $pane[$addressType . '_zone'] = uc_zone_select(uc_get_field_name('zone'), NULL, $country_id, array(
                                        'required' => uc_address_field_required('zone'),
                                      )
                                                    );
      if (count($pane[$addressType . '_zone']['#options']) == 1) {
        $pane[$addressType . '_zone']['#required'] = FALSE;
      }
      $stateOption = array_search($stateName, array_map('strtolower', $pane[$addressType . '_zone']['#options']));
      $pane[$addressType . '_zone']['#default_value'] = $stateOption;

      // Set country.
      $countryOption = array_search($country_name, array_map('strtolower', $pane[$addressType . '_country']['#options']));
      $pane[$addressType . '_country']['#default_value'] = $countryOption;

      // Trigger shipping calculation via javascript.
      if ($addressType == 'delivery') {
        add_autocalc_shipping_js();
      }
    }
    if (!empty($prefillPhones[$addressType])) {
      $prefill = $prefillPhones[$addressType];
      $pane[$addressType . '_phone']['#default_value'] =
        CRM_Utils_Array::value('phone', $prefill);
    }
  }
}
*/

/**
 * Get available locations.
 *
 * Pref set types by variable in future instead of hard-coding types
 * UC Fields are stored to civicrm fields are prefilled from.
 *
 * We don't provide a form for this yet but you can configure using
 *
 *  drush php-eval "variable_set('uc_civicrm_locations', \
 *    array('civicrm-delivery' => 1));"
 *
 * Your location will be merged into the pre-set ones so you can set
 * between 1 & 4.
 *
 * @return array
 *   Locations.
 */
function _uc_civicrm_get_locations() {
  $location_types = civicrm_api3('phone', 'getoptions', array('field' => 'location_type_id'));
  $location_types = $location_types['values'];

  $locations = array(
    'civicrm-billing' => variable_get('uc_civicrm_locations_civicrm_billing', array_search('Billing', $location_types)),
    'uc-billing' => variable_get('uc_civicrm_locations_uc_billing', array_search('Ubercart_Billing', $location_types) ? array_search('Ubercart_Billing', $location_types) : array_search('Billing', $location_types)),
    'civicrm-delivery' => variable_get('uc_civicrm_locations_civicrm_delivery', array_search('Postal', $location_types)),
    'uc-delivery' => variable_get('uc_civicrm_locations_uc_delivery', array_search('Ubercart_Shipping', $location_types) ? array_search('Ubercart_Shipping', $location_types) : array_search('Postal', $location_types)),
  );
  return $locations;
}

/**
 * Return Ubercart id for a country.
 *
 * @param string $country_name
 *   Country name to lookup, e.g. Australia.
 *
 * @return string
 *   Ubercart id used in select options.
 */
function _uc_civicrm_get_country_id($country_name) {
  $country_data = uc_get_country_data(array('country_name' => $country_name));
  $country = current($country_data);
  return $country['country_id'];
}

/**
 * Get option name from id.
 *
 * @TODO Why is $fn a parameter here? The only calls to it don't set
 * that value. Remove.
 *
 * @param string $id
 *   stateprovince id.
 *
 * @return string
 *   Name of state.
 */
function _uc_civicrm_get_option_name($option, $id, $fn = 'strtolower') {
  $names = civicrm_api3('constant', 'get', array('name' => $option));
  return $fn($names['values'][$id]);
}

/**
 * Wrapper for getOptions to get contact type options.
 */
function _uc_get_location_type_options() {
  if (method_exists('CRM_Core_PseudoConstant', 'locationType')) {
    return CRM_Core_PseudoConstant::locationType();
  }
  else {
    $result = civicrm_api3('address', 'getoptions', array('field' => 'location_type_id'));
    return $result['values'];
  }
}

/**
 * Cal shipping for on prefill.
 *
 * @see https://drupal.org/node/1664858
 *
 * @TODO Disable - see #2171425.
 */
/*
function _uc_civicrm_add_autocalc_shipping_js() {
  drupal_add_js('$(document).ready(function() {
      $("input[id*=quote-button]").click().hide();
      $("#edit-panes-delivery-delivery-zone-wrapper").change(function() {
        $("input[id*=quote-button]").click();
      });
      $("#edit-panes-delivery-delivery-country").change(function() {
        $("input[id*=quote-button]").click();
      });
    });', 'inline');
}
*/
